# Every setting in base.py can be overloaded by redefining it here.
from .base import *

# These are required for Django to function properly. Don't touch.
ROOT_URLCONF = '{{ alliance_auth.app_name }}.urls'
WSGI_APPLICATION = '{{ alliance_auth.app_name }}.wsgi.application'
SECRET_KEY = '{{ django_seed_value }}'

# This is where css/images will be placed for your webserver to read
STATIC_ROOT = "/var/www/{{ alliance_auth.app_name }}/static/"

# Change this to change the name of the auth site displayed
# in page titles and the site header.
SITE_NAME = '{{ alliance_auth.app_name }}'

# Change this to enable/disable debug mode, which displays
# useful error messages but can leak sensitive data.
DEBUG = False

# Add any additional apps to this list.
INSTALLED_APPS += [
{% for app in installed_apps %}
'{{ app }}',
{% endfor %}
]

# To change the logging level for extensions, uncomment the following line.
# LOGGING['handlers']['extension_file']['level'] = 'DEBUG'


# Enter credentials to use MySQL/MariaDB. Comment out to use sqlite3
DATABASES['default'] = {
    'ENGINE': 'django.db.backends.mysql',
    'NAME': '{{ alliance_auth.db.name }}',
    'USER': '{{ alliance_auth.db.user }}',
    'PASSWORD': '{{ alliance_auth.db.password }}',
    'HOST': '127.0.0.1',
    'PORT': '3306',
    'OPTIONS': {'charset': 'utf8mb4'},
}

# Register an application at https://developers.eveonline.com for Authentication
# & API Access and fill out these settings. Be sure to set the callback URL
# to https://example.com/sso/callback substituting your domain for example.com
# Logging in to auth requires the publicData scope (can be overridden through the
# LOGIN_TOKEN_SCOPES setting). Other apps may require more (see their docs).
ESI_SSO_CLIENT_ID = '{{ alliance_auth.esi.clientId }}'
ESI_SSO_CLIENT_SECRET = '{{ alliance_auth.esi.clientSecret }}'
ESI_SSO_CALLBACK_URL = '{{ alliance_auth.esi.callbackURL }}'
ESI_USER_CONTACT_EMAIL = '{{ alliance_auth.esi.email }}'

# By default emails are validated before new users can log in.
# It's recommended to use a free service like SparkPost or Elastic Email to send email.
# https://www.sparkpost.com/docs/integrations/django/
# https://elasticemail.com/resources/settings/smtp-api/
# Set the default from email to something like 'noreply@example.com'
# Email validation can be turned off by uncommenting the line below. This can break some services.
# REGISTRATION_VERIFY_EMAIL = False
EMAIL_HOST = '{{ alliance_auth.email.host }}'
EMAIL_PORT = {{ alliance_auth.email.port }}
EMAIL_HOST_USER = '{{ alliance_auth.email.user }}'
EMAIL_HOST_PASSWORD = '{{ alliance_auth.email.password }}'
EMAIL_USE_TLS = {{ alliance_auth.email.tls }}
DEFAULT_FROM_EMAIL = '{{ alliance_auth.email.default_from }}'

#######################################
# Add any custom settings below here. #
#######################################

CELERYBEAT_SCHEDULE['structures_update_all_structures'] = {
    'task': 'structures.tasks.update_all_structures',
    'schedule': crontab(minute='*/30'),
}
CELERYBEAT_SCHEDULE['structures_fetch_all_notifications'] = {
    'task': 'structures.tasks.fetch_all_notifications',
    'schedule': crontab(minute='*/5'),
}
CELERYBEAT_SCHEDULE['structuretimers_housekeeping'] = {
    'task': 'structuretimers.tasks.housekeeping',
    'schedule': crontab(minute=0, hour=3),
}
# Fittings Module
CELERYBEAT_SCHEDULE['fittings_update_types'] = {
    'task': 'fittings.tasks.verify_server_version_and_update_types',
    'schedule': crontab(minute=0, hour='12'),
}
# Mail Relay
CELERYBEAT_SCHEDULE['mailrelay_forward_new_mails'] = {
    'task': 'mailrelay.tasks.forward_new_mails',
    'schedule': crontab(minute='*/5'),
}
# Kill Tracker
CELERYBEAT_SCHEDULE['killtracker_run_killtracker'] = {
    'task': 'killtracker.tasks.run_killtracker',
    'schedule': crontab(minute='*/1'),
}
# Moon Mining
CELERYBEAT_SCHEDULE['moonmining_run_regular_updates'] = {
    'task': 'moonmining.tasks.run_regular_updates',
    'schedule': crontab(minute='*/10'),
}
CELERYBEAT_SCHEDULE['moonmining_run_report_updates'] = {
    'task': 'moonmining.tasks.run_report_updates',
    'schedule': crontab(minute=30, hour='*/1'),
}
CELERYBEAT_SCHEDULE['moonmining_run_value_updates'] = {
 'task': 'moonmining.tasks.run_calculated_properties_update',
 'schedule': crontab(minute=30, hour=3)
}
# Memberaudit
CELERYBEAT_SCHEDULE['memberaudit_run_regular_updates'] = {
    'task': 'memberaudit.tasks.run_regular_updates',
    'schedule': crontab(minute=0, hour='*/1'),
}
# AA RS To Discord
CELERYBEAT_SCHEDULE["aa_rss_to_discord_fetch_rss"] = {
    "task": "aa_rss_to_discord.tasks.fetch_rss",
    "schedule": crontab(minute="*/5"),
}

## Settings for Allianceauth-Discordbot
# Admin Commands
ADMIN_DISCORD_BOT_CHANNELS = [111, 222, 333]
# Sov Commands
SOV_DISCORD_BOT_CHANNELS = [111, 222, 333]
# Adm Commands
ADM_DISCORD_BOT_CHANNELS = [111, 222, 333]

DISCORD_BOT_SOV_STRUCTURE_OWNER_IDS = [1000169] # Centre for Advanced Studies example
DISCORD_BOT_MEMBER_ALLIANCES = [111, 222, 333] # A list of alliances to be considered "Mains"

DISCORD_BOT_ADM_REGIONS = [10000002] # The Forge Example
DISCORD_BOT_ADM_SYSTEMS = [30000142] # Jita Example
DISCORD_BOT_ADM_CONSTELLATIONS = [20000020] # Kimitoro Example

## Insert AADiscordBot's logging into Django Logging config
LOGGING['handlers']['bot_log_file']= {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'log/discord_bot.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
        }
LOGGING['loggers']['aadiscordbot'] = {'handlers': ['bot_log_file'],'level': 'DEBUG'}

# configure the bots in-built cogs.
DISCORD_BOT_COGS = ["aadiscordbot.cogs.about", # about the bot
                    "aadiscordbot.cogs.admin", # Discord server admin helpers
                    "aadiscordbot.cogs.members", # Member lookup commands
                    "aadiscordbot.cogs.timers", # timer board integration
                    "aadiscordbot.cogs.auth", # return auth url
                    "aadiscordbot.cogs.sov", # some sov helpers
                    "aadiscordbot.cogs.time", # whats the time Mr Eve Server
                    "aadiscordbot.cogs.eastereggs", # some "fun" commands from ariel...
                    "aadiscordbot.cogs.remind", # very Basic in memory reminder tool
                    "aadiscordbot.cogs.reaction_roles" # auth group integrated reaction roles
                   ]

# Discord Configuration
DISCORD_GUILD_ID = '{{ discord.guild_id }}'
DISCORD_CALLBACK_URL = '{{ discord.callback_url }}'
DISCORD_APP_ID = '{{ discord.app_id }}'
DISCORD_APP_SECRET = '{{ discord.app_secret }}'
DISCORD_BOT_TOKEN = '{{ discord.bot_token }}'
DISCORD_SYNC_NAMES = {{ discord.sync_names }}

CELERYBEAT_SCHEDULE['discord.update_all_usernames'] = {
    'task': 'discord.update_all_usernames',
    'schedule': crontab(minute=0, hour='*/12'),
}

---
- name: Install software
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  loop:
    - mariadb-client
    - mariadb-common
    - mariadb-server
    - percona-toolkit
    - libmariadb-dev
    - python3-mysqldb
    - python3-dev
    - python3-venv
    - python3-pip
    - supervisor
    - nginx

- name: Install redis
  include_role:
    name: geerlingguy.redis

- name: Create allianceauth user
  user:
    name: "{{ alliance_auth.user }}"
    state: present
    system: true
    home: "{{ home_dir }}"

- name: Install python modules
  pip:
    virtualenv: "{{ venv_dir }}"
    virtualenv_command: python3 -m venv
    name:
      - wheel
      - allianceauth
      - gunicorn
      - django-eveuniverse
      - aa-structures
      - aa-structuretimers

- name: Start MariaDB
  service:
    name: mariadb
    state: started

- name: Delete anonymous users
  mysql_user:
    user: ""
    state: absent

- name: Drop test database
  mysql_db:
    name: test
    state: absent

- name: Create allianceauth database
  mysql_db:
    name: "{{ alliance_auth.db.name }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: localhost
    state: present

- name: Create user for allianceauth db
  mysql_user:
    name: "{{ alliance_auth.db.user }}"
    password: "{{ alliance_auth.db.password }}"
    priv: "{{ alliance_auth.db.name }}.*:ALL"
    host: localhost
    login_user: root
    login_password: "{{ mysql_root_password }}"
    state: present

- name: Run allianceauth start
  command: "{{ allianceauth }} start {{ alliance_auth.app_name }}"
  become: true
  become_user: "{{ alliance_auth.user }}"
  args:
    chdir: "{{ home_dir }}"
    creates: "{{ home_dir }}/{{ alliance_auth.app_name }}"

- name: Deploy AA app config
  template:
    src: files/local.py.j2
    dest: "{{ home_dir }}/{{ alliance_auth.app_name }}/{{ alliance_auth.app_name }}/settings/local.py"
  notify:
    - restart apps

- name: Migrate database
  command: "{{ python }} {{ manage }} migrate"
  become: true
  become_user: "{{ alliance_auth.user }}"
  args:
    chdir: "{{ home_dir }}"

- name: Create static content directory
  file:
    path: "/var/www/{{ alliance_auth.app_name }}"
    owner: "{{ alliance_auth.user }}"
    state: directory

- name: Generate static files
  command: "{{ python }} {{ manage }} collectstatic --noinput"
  become: true
  become_user: "{{ alliance_auth.user }}"

- name: Check config
  command: "{{ python }} {{ manage }} check"
  become: true
  become_user: "{{ alliance_auth.user }}"

- name: Copy supervisor config
  copy:
    src: "{{ home_dir }}/{{ alliance_auth.app_name }}/supervisor.conf"
    dest: "/etc/supervisor/conf.d/{{ alliance_auth.app_name }}.conf"
    remote_src: yes
  notify:
    - restart supervisor

- name: Deploy supervisor app config
  template:
    src: files/app.conf.j2
    dest: "/etc/supervisor/conf.d/{{ alliance_auth.app_name }}.conf"
  notify:
    - restart apps

- name: Create nginx ssl directory
  file:
    path: /etc/ssl/self
    state: directory
    mode: '0755'

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "/etc/ssl/self/{{ alliance_auth.http_host }}.key"

- name: Generate an OpenSSL Certificate Signing Request
  become: yes
  community.crypto.openssl_csr:
    path: "/etc/ssl/self/{{ alliance_auth.http_host }}.csr"
    privatekey_path: "/etc/ssl/self/{{ alliance_auth.http_host }}.key"
    common_name: "{{ alliance_auth.http_host }}"

- name: Generate a Self Signed OpenSSL certificate
  become: yes
  community.crypto.x509_certificate:
    path: "/etc/ssl/self/{{ alliance_auth.http_host }}.crt"
    privatekey_path: "/etc/ssl/self/{{ alliance_auth.http_host }}.key"
    csr_path: "/etc/ssl/self/{{ alliance_auth.http_host }}.csr"
    provider: selfsigned

- name: create symlink
  become: yes
  file:
    src: "/etc/nginx/sites-available/{{ alliance_auth.app_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ alliance_auth.app_name }}"
    state: link
  notify:
    - restart nginx

- name: copy the nginx config file
  become: yes
  copy:
    src: files/nginx.conf
    dest: "/etc/nginx/sites-available/{{ alliance_auth.app_name }}.conf"
  notify:
    - restart nginx

- name: Create lock dir if needed
  file:
    name: "{{ lock_dir }}"
    state: directory

- name: Deploy data load script
  template:
    src: files/load_data.sh.j2
    dest: "{{ home_dir }}/load_data.sh"
    mode: 0755

- name: Trigger data load jobs
  command: "{{ home_dir }}/load_data.sh \"{{ data_load_jobs | join('\" \"') }}\""
